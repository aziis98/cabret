(*script.Program)({
  Statements: ([]script.Expression) (len=1) {
    (*script.FunctionCall)({
      Receiver: (*script.Identifier)({
        Value: (string) (len=3) "foo"
      }),
      Arguments: ([]script.ArgumentExpression) (len=3) {
        (*script.BinaryOperation)({
          Lhs: (*script.ListExpression)({
            Values: ([]script.Expression) (len=3) {
              (*script.BinaryOperation)({
                Lhs: (*script.LiteralNumber)({
                  Value: (float64) 1
                }),
                Operator: (string) "",
                Rhs: (script.Expression) <nil>
              }),
              (*script.BinaryOperation)({
                Lhs: (*script.LiteralNumber)({
                  Value: (float64) 2
                }),
                Operator: (string) "",
                Rhs: (script.Expression) <nil>
              }),
              (*script.BinaryOperation)({
                Lhs: (*script.LiteralNumber)({
                  Value: (float64) 3
                }),
                Operator: (string) "",
                Rhs: (script.Expression) <nil>
              })
            }
          }),
          Operator: (string) "",
          Rhs: (script.Expression) <nil>
        }),
        (*script.BinaryOperation)({
          Lhs: (*script.DictExpression)({
            Entries: ([]*script.DictEntry) (len=2) {
              (*script.DictEntry)({
                Key: (*script.Identifier)({
                  Value: (string) (len=1) "a"
                }),
                Value: (*script.BinaryOperation)({
                  Lhs: (*script.LiteralNumber)({
                    Value: (float64) 1
                  }),
                  Operator: (string) "",
                  Rhs: (script.Expression) <nil>
                })
              }),
              (*script.DictEntry)({
                Key: (*script.Identifier)({
                  Value: (string) (len=1) "b"
                }),
                Value: (*script.FunctionCall)({
                  Receiver: (*script.Identifier)({
                    Value: (string) (len=3) "foo"
                  }),
                  Arguments: ([]script.ArgumentExpression) (len=2) {
                    (*script.BinaryOperation)({
                      Lhs: (*script.Quote)({
                        Value: (*script.Identifier)({
                          Value: (string) (len=5) "other"
                        })
                      }),
                      Operator: (string) "",
                      Rhs: (script.Expression) <nil>
                    }),
                    (*script.BinaryOperation)({
                      Lhs: (*script.DictExpression)({
                        Entries: ([]*script.DictEntry) (len=1) {
                          (*script.DictEntry)({
                            Key: (*script.Identifier)({
                              Value: (string) (len=3) "bar"
                            }),
                            Value: (*script.BinaryOperation)({
                              Lhs: (*script.LiteralNumber)({
                                Value: (float64) 456
                              }),
                              Operator: (string) "",
                              Rhs: (script.Expression) <nil>
                            })
                          })
                        }
                      }),
                      Operator: (string) "",
                      Rhs: (script.Expression) <nil>
                    })
                  }
                })
              })
            }
          }),
          Operator: (string) "",
          Rhs: (script.Expression) <nil>
        }),
        (*script.BinaryOperation)({
          Lhs: (*script.ListExpression)({
            Values: ([]script.Expression) (len=3) {
              (*script.BinaryOperation)({
                Lhs: (*script.LiteralNumber)({
                  Value: (float64) 4
                }),
                Operator: (string) "",
                Rhs: (script.Expression) <nil>
              }),
              (*script.BinaryOperation)({
                Lhs: (*script.LiteralNumber)({
                  Value: (float64) 5
                }),
                Operator: (string) "",
                Rhs: (script.Expression) <nil>
              }),
              (*script.BinaryOperation)({
                Lhs: (*script.LiteralNumber)({
                  Value: (float64) 6
                }),
                Operator: (string) "",
                Rhs: (script.Expression) <nil>
              })
            }
          }),
          Operator: (string) "",
          Rhs: (script.Expression) <nil>
        })
      }
    })
  }
})
